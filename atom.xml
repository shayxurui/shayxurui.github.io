<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xurui blog</title>
  
  <subtitle>blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-30T11:24:54.814Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>xu rui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>maskrcnn阅读笔记</title>
    <link href="http://yoursite.com/2018/10/30/maskrcnn%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/10/30/maskrcnn阅读笔记/</id>
    <published>2018-10-30T11:20:42.000Z</published>
    <updated>2018-10-30T11:24:54.814Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="deep learning" scheme="http://yoursite.com/tags/deep-learning/"/>
    
  </entry>
  
  <entry>
    <title>post</title>
    <link href="http://yoursite.com/2018/10/30/post/"/>
    <id>http://yoursite.com/2018/10/30/post/</id>
    <published>2018-10-30T11:05:09.000Z</published>
    <updated>2018-10-30T11:07:54.553Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Post-content…"><a href="#Post-content…" class="headerlink" title="Post content…"></a>Post content…</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Post-content…&quot;&gt;&lt;a href=&quot;#Post-content…&quot; class=&quot;headerlink&quot; title=&quot;Post content…&quot;&gt;&lt;/a&gt;Post content…&lt;/h2&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>人脸关键点基本操作函数</title>
    <link href="http://yoursite.com/2018/10/30/FaceAlignment/"/>
    <id>http://yoursite.com/2018/10/30/FaceAlignment/</id>
    <published>2018-10-30T10:50:53.122Z</published>
    <updated>2018-10-30T10:50:53.074Z</updated>
    
    <content type="html"><![CDATA[<p>##读取图片和关键点:<br>    image=PIL.Image.open(image_path)<br>    landmark=np.loadtxt(pts_path,skiprows=3,comments=’}’)</p><pre><code>#或者landmarks = np.genfromtxt(pts_path, skip_header=3, skip_footer=1)</code></pre><p>##根据关键点得到边界框:<br>    minx = int(landmarks[:, 0].min())<br>    miny = int(landmarks[:, 1].min())<br>    maxx = int(landmarks[:, 0].max())<br>    maxy = int(landmarks[:, 1].max())    </p><p>##随机裁剪图片:<br>    h, w = image.shape[:2]<br>    new_h, new_w = output_size</p><pre><code>top = np.random.randint(0, h - new_h)left = np.random.randint(0, w - new_w)image = image[top: top + new_h,left: left + new_w]landmarks = landmarks - [left, top]</code></pre><p>##提取人脸:<br>    image = image.crop([bbox[0] - pad, bbox[1] - pad, bbox[2] + pad, bbox[3] + pad])<br>    landmarks = landmarks - (bbox[0] - pad, bbox[1] - pad)</p><blockquote><p>bbox是边界框坐标,bbox=(minx,miny,maxx,maxy).<br>pad是多裁剪部分,关键点减去裁剪后的起始坐标.</p></blockquote><p>##得到旋转矩阵:<br>    theta = np.radians(rotation_angle)<br>    c, s = np.cos(theta), np.sin(theta)<br>    mat = np.matrix(‘{} {} 0; {} {} 0’.format(c, -s, s, c), np.float32)</p><blockquote><p>mat=((cos,-sin,0),(sin,cos,0))</p></blockquote><p>##随机旋转图片:<br>    w, h = image.size<br>    image_rot = image.rotate(rotation_angle)<br>    w_rot, h_rot = image_rot.size<br>    center=(w/2,h/2)<br>    center_rot=(w_rot/2,h_rot/2)<br>    landmarks_rot=landmarks-center<br>    landmarks_rot = np.asarray(np.dot(landmarks_rot, manual_theta_inv)[:, :2])<br>    landmarks_rot=landmarks_rot+center_rot</p><blockquote><p>manual_theta_inv是旋转矩阵.</p></blockquote><p>##图片放缩:<br>    w, h = image.size<br>    image =torchvision.transforms.Resize((self.output_size, self.output_size))(image)<br>    landmarks = landmarks * [self.output_size / w, self.output_size / h]</p><p>##图片归一化:<br>    self.mean_img=np.mean(self.imgs,axis=(-3,-2))<br>    self.std_dev_img=np.std(self.imgs,axis=(-3,-2))<br>    self.imgs=(self.imgs-self.mean_img)/self.std_dev_img</p><p>##图片转换成张量:<br>    image=torchvision.transforms.ToTensor(image)<br>    landmarks=torch.from_numpy(landmarks).float().div(img_size)</p><p>##根据一个关键点，生成一个热点图:<br>    return np.zeros((heatmap.size, heatmap.size))</p><blockquote><p>如果关键点不可见，则返回全0矩阵</p></blockquote><pre><code>x_range = [i for i in range(heatmap.size)]y_range = [i for i in range(heatmap.size)]xx, yy = np.meshgrid(x_range, y_range)d2 = (xx - keypoint[0]) ** 2 + (yy - keypoint[1]) ** 2</code></pre><blockquote><p>xx是x_range的行扩展，yy是y_range的列扩展。xx-keypoint[0]，xx中第keypoint[0]列为0。yy-keypoint[1]，yy中第keypoint[1]行为0。d2,只有keypoint坐标下的值为0。</p></blockquote><pre><code>exponent = d2 / 2.0 / sigma / sigmaheatmap = np.exp(-exponent)</code></pre><blockquote><p>heatmap中只有关键点坐标值为1，其他坐标值皆小于1。</p></blockquote><p>##根据关键点生成热点图:<br>    landmarks = landmarks * [self.heatmap_size / image.size, self.heatmap_size / image.size]<br>    for i in range(68):<br>        flag = ~np.isnan(landmarks[i, 0])<br>        heatmap=…<br>        heatmap = heatmap[np.newaxis, …]<br>        hearmaps.append(heatmap)</p><blockquote><p>flag:该关键点是否被遮挡，或者不可见。如果不可见，则landmark值为NaN。</p></blockquote><p>##测试误差</p><blockquote><p>瞳孔距离:</p></blockquote><pre><code>normDist = np.linalg.norm(np.mean(gtLandmarks[36:42], axis=0) - np.mean(gtLandmarks[42:48], axis=0))</code></pre><blockquote><p>眼角距离:</p></blockquote><pre><code>normDist = np.linalg.norm(gtLandmarks[36] - gtLandmarks[45])</code></pre><blockquote><p>边界框对角线距离:</p></blockquote><pre><code>height, width = np.max(gtLandmarks, axis=0) - np.min(gtLandmarks, axis=0)normDist = np.sqrt(width ** 2 + height ** 2)</code></pre><blockquote><p>FAN的边界框对角线距离:</p></blockquote><pre><code>height, width = np.max(gtLandmarks, axis=0) - np.min(gtLandmarks, axis=0)normDist=np.sqrt(width*height)</code></pre><blockquote><p>测试误差:</p></blockquote><pre><code>err = np.mean(np.sqrt(np.sum((gtLandmarks - ptLandmarks) ** 2, axis=1))) / normDist</code></pre><p>##左右翻转图片:</p><blockquote><p>图片左右翻转:</p></blockquote><pre><code>img=np.array(np.fliplr(img))</code></pre><blockquote><p>关键点左右翻转:</p></blockquote><pre><code>landmark[:,:,0]=img.size[1]-landmark[:,:,0]    #把关键点的坐标置以图片的x坐标中点对称</code></pre><p>##扰动:</p><blockquote><p>从正态分布随机产生一个弧度，均值为0，方差是给定的弧度</p></blockquote><pre><code>angel=np.random.normal(0,rotation_std_dev_radian)</code></pre><blockquote><p>正太分布的标准差，均值为0，随机产生偏移</p></blockquote><pre><code>offset=[np.random.normal(0,translation_std_dev_x),np.random.normal(0,translation_std_dev_y)]</code></pre><blockquote><p>随机产生放缩比例</p></blockquote><pre><code>scaling=np.random.normal(1,scale_std_dev)</code></pre><blockquote><p>旋转矩阵:</p></blockquote><pre><code>R=np.array([[np.cos(angel),-np.sin(angel)],[np.sin(angel),np.cos(angel)]])</code></pre><p>##显示68个关键点在人脸中的位置:<br>    def drawLineChart(frame,i,j):</p><pre><code>    for k in range(i,j-1):        cv2.circle(frame,(preds[k,0],preds[k,1]),2,(255,255,255),-1)        cv2.line(frame,(preds[k,0],preds[k,1]),(preds[k+1,0],preds[k+1,1]),(255,255,255),1)    cv2.circle(frame,(preds[j-1,0],preds[j-1,1]),2,(255,255,255),-1)drawLineChart(frame,0,17)drawLineChart(frame,17,22)drawLineChart(frame,22,27)drawLineChart(frame,27,31)drawLineChart(frame,31,36)drawLineChart(frame,36,42)cv2.line(frame,(preds[41,0],preds[41,1]),(preds[36,0],preds[36,1]),(255,255,255),1)drawLineChart(frame,42,48)cv2.line(frame,(preds[47,0],preds[47,1]),(preds[42,0],preds[42,1]),(255,255,255),1)drawLineChart(frame,48,60)cv2.line(frame,(preds[59,0],preds[59,1]),(preds[48,0],preds[48,1]),(255,255,255),1)drawLineChart(frame,60,68)cv2.line(frame,(preds[67,0],preds[67,1]),(preds[60,0],preds[60,1]),(255,255,255),1)</code></pre><p>##高斯图:</p><p>###高斯核:<br>    for i in range(height):<br>            for j in range(width):<br>                gauss[i][j] = amplitude <em> math.exp(-(math.pow((j + 1 - center_x) / (<br>                    sigma_horz </em> width), 2) / 2.0 + math.pow((i + 1 - center_y) / (sigma_vert * height), 2) / 2.0))</p><p>###根据高斯核，生成高斯图:<br>    image=np.zeros((256,256))<br>    point=landmark<br>    sigma=2</p><pre><code>ul = [math.floor(point[0] - 3 * sigma), math.floor(point[1] - 3 * sigma)]     #ul=[xmin-6,ymin-6]br = [math.floor(point[0] + 3 * sigma), math.floor(point[1] + 3 * sigma)]     #br=[xmax-6,ymax+6]if (ul[0] &gt; image.shape[1] or ul[1] &gt;        image.shape[0] or br[0] &lt; 1 or br[1] &lt; 1):    return imagesize = 6 * sigma + 1g = _gaussian(size)  #高斯核  13*13g_x = [int(max(1, -ul[0])), int(min(br[0], image.shape[1])) -int(max(1, ul[0])) + int(max(1, -ul[0]))]g_y = [int(max(1, -ul[1])), int(min(br[1], image.shape[0])) -int(max(1, ul[1])) + int(max(1, -ul[1]))]img_x = [int(max(1, ul[0])), int(min(br[0], image.shape[1]))]img_y = [int(max(1, ul[1])), int(min(br[1], image.shape[0]))]assert (g_x[0] &gt; 0 and g_y[1] &gt; 0)image[img_y[0] - 1:img_y[1], img_x[0] - 1:img_x[1]] = image[img_y[0] - 1:img_y[1], img_x[0] - 1:img_x[1]] + g[g_y[0] - 1:g_y[1], g_x[0] - 1:g_x[1]]#image[ymin-1:ymax,xmin-1:xmax]=image[ymin-1:ymax,xmin-1:xmax]+g[1-1:y_max-ymin+1,1-1:x_max-xmin+1]image[image &gt; 1] = 1return image</code></pre><p>##从热点图中得到关键点坐标：<br>     max, idx = torch.max(                                                                            #max:(1,68)         idx:(1,68)<br>        hm.view(hm.size(0), hm.size(1), hm.size(2) * hm.size(3)), 2)  #(1,68,65536)<br>    idx += 1<br>    preds = idx.view(idx.size(0), idx.size(1), 1).repeat(1, 1, 2).float()        #preds:(1,68,2)<br>    preds[…, 0].apply_(lambda x: (x - 1) % hm.size(3) + 1)          #  x坐标. x=idx%hm.size(3)<br>    preds[…, 1].add_(-1).div_(hm.size(2)).floor_().add_(1)          # y坐标. y=idx/hm.size(2)<br>    for i in range(preds.size(0)):         #1<br>        for j in range(preds.size(1)):         #68<br>            hm_ = hm[i, j, :]        #(256,256)<br>            pX, pY = int(preds[i, j, 0]) - 1, int(preds[i, j, 1]) - 1<br>            if pX &gt; 0 and pX &lt; 63 and pY &gt; 0 and pY &lt; 63:<br>                diff = torch.FloatTensor(<br>                    [hm_[pY, pX + 1] - hm_[pY, pX - 1],<br>                     hm_[pY + 1, pX] - hm_[pY - 1, pX]])</p><pre><code>            preds[i, j].add_(diff.sign_().mul_(.25))preds.add_(-.5)preds_orig = torch.zeros(preds.size())                                      #preds_orig:(1,68,2)if center is not None and scale is not None:    for i in range(hm.size(0)):        for j in range(hm.size(1)):            preds_orig[i, j] = transform(                preds[i, j], center, scale, hm.size(2), True)return preds, preds_orig</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##读取图片和关键点:&lt;br&gt;    image=PIL.Image.open(image_path)&lt;br&gt;    landmark=np.loadtxt(pts_path,skiprows=3,comments=’}’)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#或者
landm
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/10/30/hello-world/"/>
    <id>http://yoursite.com/2018/10/30/hello-world/</id>
    <published>2018-10-30T01:34:53.906Z</published>
    <updated>2018-10-30T01:34:53.906Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="hljs-string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
